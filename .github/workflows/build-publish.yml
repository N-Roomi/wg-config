name: Build and publish

on:
  release:
    types: [published]
  pull_request:
  push:
    branches:
      - main

jobs:
  build:
    name: Build distribution
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      - name: Setup latest Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
      - name: Setup a local virtual environment
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      - name: Build wheel and source distributions
        run: poetry build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

  # publish-to-pypi:
  #   name: Publish Python distribution to PyPI
  #   if: github.event_name == 'release'
  #   needs:
  #     - build
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: pypi
  #     url: https://pypi.org/p/wg-config # Replace <package-name> with your PyPI project name
  #   permissions:
  #     id-token: write # IMPORTANT: mandatory for trusted publishing
  #   steps:
  #     - name: Download all the dists
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: python-package-distributions
  #         path: dist/
  #     - name: Publish distribution to PyPI
  #       uses: pypa/gh-action-pypi-publish@v1.8.11

  generate_wheels_matrix:
    name: generate wheels matrix
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.set-matrix.outputs.include }}
    steps:
      - uses: actions/checkout@v4
      - name: Install cibuildwheel and pypyp
        run: |
          pipx install cibuildwheel==2.15.0
          pipx install pypyp==1
      - name: generate matrix
        if: github.event_name != 'pull_request'
        run: |
          {
            cibuildwheel --print-build-identifiers --platform linux \
            | pyp 'json.dumps({"only": x, "os": "ubuntu-latest"})' \
            && cibuildwheel --print-build-identifiers --platform macos \
            | pyp 'json.dumps({"only": x, "os": "macos-latest"})' \
            && cibuildwheel --print-build-identifiers --platform windows \
            | pyp 'json.dumps({"only": x, "os": "windows-latest"})'
          } | pyp 'json.dumps(list(map(json.loads, lines)))' > /tmp/matrix
        env:
          CIBW_ARCHS_LINUX: x86_64
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_ARCHS_WINDOWS: AMD64
      - name: generate matrix (PR)
        if: github.event_name == 'pull_request'
        run: |
          {
            cibuildwheel --print-build-identifiers --platform linux \
            | pyp 'json.dumps({"only": x, "os": "ubuntu-latest"})'
          } | pyp 'json.dumps(list(map(json.loads, lines)))' > /tmp/matrix
        env:
          CIBW_BUILD: "cp38-* cp312-*"
          CIBW_ARCHS_LINUX: x86_64
      - id: set-matrix
        run: echo "include=$(cat /tmp/matrix)" | tee -a $GITHUB_OUTPUT

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
      - build
    runs-on: ubuntu-latest
    permissions:
      contents: write # IMPORTANT: mandatory for making GitHub Releases
      id-token: write # IMPORTANT: mandatory for sigstore
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'

  update-stable-branch:
    name: Update stable branch
    needs:
      - build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: write
    steps:
      - name: Checkout stable branch
        uses: actions/checkout@v4
        with:
          ref: stable
          fetch-depth: 0
      - if: github.event_name == 'release'
        name: Update stable branch to release tag & push
        run: |
          git reset --hard ${{ github.event.release.tag_name }}
          git push
